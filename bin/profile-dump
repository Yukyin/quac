#!/usr/bin/env python3

# Copyright (c) Los Alamos National Security, LLC, and others.

import pstats
import sys

import quacpath
import u


ap = u.ArgumentParser()
gr = ap.default_group
gr.add_argument('-l', '--lines',
                metavar='N',
                type=int,
                default=13,
                help='lines of profile output')
gr.add_argument('-p', '--percent',
                action='store_true',
                help='print percentages rather than cumulative time')
gr.add_argument('prof_file',
                metavar='PROFFILE',
                help='profile data file')


class Stats(pstats.Stats):

   def print_line(self, func):
      'Clone of Stats.print_line() hacked to print percentages.'
      cc, nc, tt, ct, callers = self.stats[func]
      c = str(nc)
      if nc != cc:
         c = c + '/' + str(cc)
      print(c.rjust(9), end=' ', file=self.stream)
      print(f8(100*tt/self.total_tt), end=' ', file=self.stream)
      if nc == 0:
         print(' '*8, end=' ', file=self.stream)
      else:
         print(f8(100*(tt/nc)/self.total_tt), end=' ', file=self.stream)
      print(f8(100*ct/self.total_tt), end=' ', file=self.stream)
      if cc == 0:
         print(' '*8, end=' ', file=self.stream)
      else:
         print(f8(100*(ct/cc)/self.total_tt), end=' ', file=self.stream)
      print(pstats.func_std_string(func), file=self.stream)

def f8(x):
   return '%8.1f' % x


args = u.parse_args(ap)

if (args.percent):
   stats_class = Stats
else:
   stats_class = pstats.Stats

stats_class(args.prof_file).sort_stats('cumulative').print_stats(args.lines)
